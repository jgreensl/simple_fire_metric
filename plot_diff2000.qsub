#!/bin/bash
#PBS -P en0
#PBS -q normalbw
#PBS -N diff_2000
#PBS -l walltime=2:00:00
#PBS -l mem=100GB
#PBS -l ncpus=4
#PBS -l wd
#PBS -l storage=gdata/hh5+gdata/en0+scratch/en0
#PBS -oe

#set -e

source /g/data/hh5/public/apps/miniconda3/etc/profile.d/conda.sh
conda activate /g/data/hh5/public/apps/miniconda3/envs/analysis3

echo "Start: $(date '+%Y-%m-%d %H:%M:%S')"

python <<EOF

## Imports
import xarray as xr
import matplotlib.pyplot as plt

## Put us in the right repo for local relative pathing
import os
__repo__="/g/data/en0/jwg574/repos/climate_fire/"
os.chdir(__repo__)

import fio,plotting


url_daily_maximums = "/scratch/en0/jwg574/ERA5/daily_maximums.nc"
ds_daily = xr.open_dataset(url_daily_maximums)
pre_2000 = ds_daily.where(ds_daily['time.year'] < 2000, drop=True)
post_2000 = ds_daily.where(ds_daily['time.year'] >= 2000, drop=True)


threshs = [12,24,50,100]
threshnames = 't1','t2','t3','t4'
ausmask = fio.get_landmask(pre_2000.FFDI)
figname_base = '/g/data/en0/jwg574/repos/climate_fire/figures/diff2000/'

for metric in ['FFDI','DWI_V']:
    # show mean/median metric
    ds_daily[metric].mean(dim='time').plot()
    plt.title("mean "+metric)
    plt.savefig(figname_base+'%s_mean.png'%metric)
    plt.close()
    
    ## mean of yearly maximum
    mean_yearly_max_pre2000 = pre_2000[metric].resample(time='AS').max(dim='time').mean(dim='time')
    mean_yearly_max_post2000 = post_2000[metric].resample(time='AS').max(dim='time').mean(dim='time')
    
    mean_yearly_max_pre2000.plot()
    plt.title('PRE2000 mean of yearly maximum %s'%metric)
    plt.savefig(figname_base+'%s_mean_yearly_max_pre2000.png'%(metric))
    plt.close()
    
    mean_yearly_max_post2000.plot()
    plt.title('POST2000 mean of yearly maximum %s'%metric)
    plt.savefig(figname_base+'%s_mean_yearly_max_post2000.png'%(metric))
    plt.close()

    (mean_yearly_max_post2000 - mean_yearly_max_pre2000).plot()
    plt.title('POST - PRE 2000 mean of yearly maximum %s'%metric)
    plt.savefig(figname_base+'%s_mean_yearly_max_diff2000.png'%(metric))
    plt.close()


## days over excedence for FFDI
metric='FFDI'
for thresh,tname in zip(threshs,threshnames):
    newvar = '%s_%s'%(metric,tname)
    pre_excedences = pre_2000[metric]>thresh
    pre_excedences_per_year = pre_excedences.resample(time='AS').sum(dim='time').mean(dim='time')
    pre_2000[newvar] = pre_excedences_per_year
    
    post_excedences = post_2000[metric]>thresh
    post_excedences_per_year = post_excedences.resample(time='AS').sum(dim='time').mean(dim='time')
    post_2000[newvar] = post_excedences_per_year

    pre_2000[newvar].plot()
    plt.title('PRE2000 days with FFDI > %d'%thresh)
    plt.savefig(figname_base+'%s_%d_excedences_pre2000.png'%(metric,thresh))
    plt.close()
    
    post_2000[newvar].plot()
    plt.title('POST2000 days with FFDI > %d'%thresh)
    plt.savefig(figname_base+'%s_%d_excedences_post2000.png'%(metric,thresh))
    plt.close()
    
    (post_2000[newvar]-pre_2000[newvar]).where(ausmask).plot()
    plt.title('POST2000 - PRE2000 days with %s > %d'%(metric,thresh))
    plt.savefig(figname_base+'%s_%d_diff2000.png'%(metric,thresh))
    plt.close()
EOF

echo "Finish: $(date '+%Y-%m-%d %H:%M:%S')"